import java.util.Arrays;
import java.util.Stack;
import java.util.Scanner;

public class Source {
    public static void main(String[] args) {
        // TEST ZAD12
        /*
        PrzykÅ‚adowo dla tablicy T = [2, 3, 9, 5] i liczby x = 47 prawidÅ‚owa odpowiedÅº to {5, 9},
        natomiast dla liczby x = 8 prawidÅ‚owa odpowiedÅº to {2, 5},
         */
        zad12 test12 = new zad12();
        test12.arr = new int[]{2, 3, 9, 5};
        System.out.println(Arrays.toString(test12.closesProduct(47)));
        System.out.println(Arrays.toString(test12.closesProduct(8)));
        ///////////////


    }
}

// EGZAMIN I MP 2019/2020

/*

Zad. 1 (8p) ADT.

    Napisz klasÄ™ LinkStack implementujÄ…cÄ… stos wiÄ…zany o elementach ze zbioru liniowo
    uporzÄ…dkowanego, umoÅ¼liwiajÄ…cÄ… wykonanie w czasie O(1) poniÅ¼szych operacji na stosie:
        a. Link Stack(): konstruktor tworzy stos pusty
        b. void Push(int x): wstawia element w wartoÅ›ci x na stos
        c. void Pop() : usuwa element ze stosu
        d. void getMin(): wypisuje wartoÅ›Ä‡ najmniejszego elementu znajdujÄ…cego siÄ™ na stosie
        e. void top(): wypisuje wartoÅ›Ä‡ elementu na wierzchoÅ‚ku stosu
        f. void getAver(): wypisuje wartoÅ›Ä‡ Å›redniej arytmetycznej elementÃ³w
        znajdujÄ…cych siÄ™ na stosie.
    Wymagania:
            1. Klasa LinkStack moÅ¼e zawieraÄ‡ tylko referencjÄ™ do wierzchoÅ‚ka â€“ top, inne zmienne
            sÄ… niedopuszczalne.
            2. Podaj opis dziaÅ‚ania powyÅ¼szych operacji i uzasadnij ich zÅ‚oÅ¼onoÅ›Ä‡
 */

class zad1 {
    class LinkStack {
        Node top;

        class Node {
            Node prev;
            int info;
            int suma;
            int num;
            int min;

            Node(Node prev, int x) {
                info = x;
                this.prev = prev;
                if (prev == null) {
                    num = 1;
                    min = x;
                    suma = x;
                } else {
                    num = prev.num + 1;
                    suma = prev.suma + info;
                    min = prev.min;
                    if (min > x) {
                        min = x;
                    }
                }
            }
        }

        LinkStack() {
            top = null;
        }

        void Push(int x) {
            top = new Node(top, x);
        }

        void Pop() {
            if (top == null) return;
            top = top.prev;
        }

        void getMin() {
            if (top == null) return;
            System.out.println(top.min);
        }

        void top() {
            if (top == null) return;
            System.out.println(top.info);
        }

        void getAver() {
            if (top == null) return;
            System.out.println(top.suma / top.num);
        }

    }

}


/*

Zad. 2 (8p)
Dana jest teoretyczna maszyna operujÄ…ca na globalnej tablicy liczb rzeczywistych array
o rozmiarze n. Jest ona w stanie wykonaÄ‡ operacjÄ™ flip(int i), polegajÄ…cÄ… na odwrÃ³ceniu
elementÃ³w o indeksach od 0 do i w czasie O(1). PrzykÅ‚adowo flip(3) na tablicy [3,8,4,5,1,2] daje
tablicÄ™ [5,4,8,3,1,2]. JedynÄ… dodatkowÄ… metodÄ…, do ktÃ³rej mamy dostÄ™p, jest get(int i), ktÃ³ra
zwraca kopiÄ™ elementu tablicy o indeksie i. Nie mamy wiÄ™c moÅ¼liwoÅ›ci zmiany wartoÅ›ci
elementu o zadanym indeksie. ??

    ï‚· Napisz w jÄ™zyku Java metodÄ™ move(int i, int j), ktÃ³ra dla j > i wstawi element o indeksie j w
    miejsce elementu o indeksie i przesuwajÄ…c elementy od indeksu i do j-1 w prawo o jednÄ…
    komÃ³rkÄ™.
     PrzykÅ‚adowo: move(2,4) na tablicy [3,8,4,5,1,2] daje tablicÄ™ [3,8,1,4,5,2]. Zaprezentuj
    dziaÅ‚anie poszczegÃ³lnych instrukcji krok po kroku na przykÅ‚adzie kilkuelementowej tablicy
    (2 pkt),
    (moÅ¼na opuÅ›ciÄ‡ i korzystaÄ‡ z funkcji w poniÅ¼szych krokach).

    ï‚· Napisz funkcjÄ™ pancakeSort() sortujÄ…cÄ… elementy tablicy array i podaj dokÅ‚adny opis jej
    dziaÅ‚anie, przy czym za funkcjÄ™:
     - o zÅ‚oÅ¼onoÅ›ci czasowej O(n2) wzglÄ™dem naszej maszyny otrzymasz: (2,5 pkt),
     - o zÅ‚oÅ¼onoÅ›ci O(nlog2 n) : (4 pkt).


    ï‚· Podaj i uzasadnij zÅ‚oÅ¼onoÅ›Ä‡ czasowÄ… swojej wersji pancakeSort() wzglÄ™dem maszyny na
    ktÃ³rej operujemy (2 pkt).
*/
//???? nwm o co mu chodzi z tym get
class zad2 {
    static int[] arr;

    void move(int i, int j) {
        if (i <= j) return;

    }

    static void swap(int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    int partition(int low, int high) {
        int pivot = arr[high];
        int i = (low - 1);

        for (int j = low; j <= high - 1; j++) {
            if (arr[j] < pivot) {
                i++;
                swap(i, j);
            }
        }
        swap(i + 1, high);
        return (i + 1);
    }

    void pancakeSort(int low, int high) { //quick sort nlogn
        if (low < high) {
            int pivot = partition(low, high);

            pancakeSort(low, pivot - 1);
            pancakeSort(pivot + 1, high);
        }
    }
}


/*
    Zad. 3 (8pkt)
RozwaÅ¼ drzewo o nastÄ™pujÄ…ce strukturze:
    class Node {
     public int value;
     public Node[] children;
    }
    class Tree {
     public Node root;
    }
Niech v-Å›cieÅ¼ka oznacza Å›cieÅ¼kÄ™ od wierzchoÅ‚ka v do korzenia, a wartoÅ›Ä‡ v-Å›cieÅ¼ki oznacza sumÄ™
wartoÅ›ci wierzchoÅ‚kÃ³w, ktÃ³re skÅ‚adajÄ… siÄ™ na danÄ… v-Å›cieÅ¼kÄ™.
Napisz w Javie funkcjÄ™ rekurencyjnÄ… recMaxVPath(â€¦) oraz jej odpowiednik iteracyjny
iterMaxVPath(â€¦) - wyznaczajÄ…ce najwiÄ™kszÄ… wartoÅ›Ä‡ spoÅ›rÃ³d wszystkich v-Å›cieÅ¼ek. Funkcje
powinny dziaÅ‚aÄ‡ w czasie liniowym, tzn. O(n), gdzie n oznacza liczbÄ™ wierzchoÅ‚kÃ³w w drzewie.
PoniÅ¼ej przedstawiono przykÅ‚adowe drzewo z zaznaczonÄ… v-Å›cieÅ¼kÄ… o najwiÄ™kszej wartoÅ›ci.
Dodatkowe zaÅ‚oÅ¼enia:

ï‚· jedyna pÄ™tla w funkcji rekurencyjnej to pojedyncza pÄ™tla po dzieciach danego wÄ™zÅ‚a,

ï‚· funkcja rekurencyjna moÅ¼e posiadaÄ‡ maksymalnie dwa argumenty, metoda iteracyjna
dokÅ‚adnie jeden â€“ obiekt typu Node, ktÃ³ry jest korzeniem rozwaÅ¼anego drzewa, obie
funkcje zwracajÄ… liczbÄ™ typu int z maksymalnÄ… wartoÅ›ciÄ… v-Å›cieÅ¼ek,

ï‚· w funkcji iteracyjnej moÅ¼na uÅ¼yÄ‡ stosu/listy/kolejki (nie trzeba ich implementowaÄ‡), w
funkcji rekurencyjnej dodatkowe struktury sÄ… zabronione.

*/
class Zad3 {
    class StackNode {
        Node info;
        int index;

        public StackNode(Node node, int index) {
            info = node;
            this.index = index;
        }
    }

    class Node {
        public int value;
        public Node[] children;
    }

    class Tree {
        public Node root;


    }

    public int recMaxVPath(Node cur) {
        if (cur == null) return 0; //jesli puste

        if (cur.children == null || cur.children.length == 0) { //jesli nie ma dzieci
            return cur.value;
        }

        int max = Integer.MIN_VALUE;
        for (Node child : cur.children) { //loop wyznacza najwieksza sume wsrod dzieci
            int childSum = recMaxVPath(child);
            if (childSum > max) {
                max = childSum;
            }
        }

        return cur.value + max; //zwraca swoja wartosc + max z dzieci
    }

    public int iterMaxVPath(Tree tree) { //to raczej jest Åºle
        if (tree == null) return 0;

        Stack<Node> stack = new Stack<>();
        Stack<Integer> stackIndex = new Stack<>();

        stack.push(tree.root);
        stackIndex.push(0);
        int sum = 0; //suma aktualnie rozwazanej sciezki
        int maxsum = Integer.MIN_VALUE;
        while (!stack.isEmpty()) {
            Node temp = stack.pop();
            int index = stackIndex.pop(); //index dziecka
            if (index < temp.children.length) { //jesli jest jeszcze jakies dziecko
                stack.push(temp); //rodzic na stos
                stackIndex.push(index + 1); //index kolejnego dziecka
                stack.push(temp.children[index]);//dziecko na stos
                stackIndex.push(0); //dziecko index dziecka
                sum += temp.children[index].value; //suma zwiekszona o rozwazane dziecko
            } else { //dzieci sie skonczyly to cofka
                if (sum > maxsum) {
                    maxsum = sum;
                } else {
                    sum -= temp.value;
                }
            }
        }

        return maxsum;
    }


}


/*
ğŸ¦§ğŸ¦§ğŸ¦§ğŸ¦§
Zad. 5 (8pkt) Grafy
Dany jest graf nieskierowany G=(V, E), przy czym V = {a[0], ... , a[n-1]} â€“ zbiÃ³r osÃ³b,
E = {{i, j} : osoba a[i] ma kontakt z osobÄ… a[j] }. ÅšcieÅ¼ka kontaktÃ³w dÅ‚ugoÅ›ci k to ciÄ…g osÃ³b
(a[0], ... , a[k]) taki, Å¼e a[i] ma a[i+1] na liÅ›cie kontaktÃ³w, O ï‚£ i < k.
Napisz efektywnÄ… metodÄ™ float average-length() obliczajÄ…cÄ… Å›redniÄ… arytmetycznÄ…
dÅ‚ugoÅ›ci najkrÃ³tszej Å›cieÅ¼ki kontaktÃ³w pomiÄ™dzy wszystkimi parami rÃ³Å¼nych osÃ³b.
MoÅ¼esz zaÅ‚oÅ¼yÄ‡, Å¼e dla i ï‚¹j istnieje Å›cieÅ¼ka kontaktÃ³w osoby i do j.
Podaj zÅ‚oÅ¼onoÅ›Ä‡ czasowÄ… i pamiÄ™ciowÄ… podanych rozwiÄ…zaÅ„ i zwiÄ™Åºle uzasadnij.
infinity = +ï‚¥; { nieskoÅ„czonoÅ›Ä‡ }

Deklaracja grafu:
class Graph{
     private int MAX_VERTS = 20;
     private int adjMat[ ][ ]; // macierz sÄ…siedztwa
     private int n; // bieÅ¼Ä…ca liczba osÃ³b
}
gdzie:
                 |=   1 , gdy osoba i-ta ma j-tÄ… na liÅ›cie kontaktÃ³w,
adjMat [i, j] =  |
                 |=  0 , wpp.

 */
class zad5 {
    class Graph {
        private int MAX_VERTS = 20;
        private int adjMat[][]; // macierz sÄ…siedztwa
        private int n; // bieÅ¼Ä…ca liczba osÃ³b
    }




}

/////// EGZAMIN 1 2018/2019

    /*
    Zad. 1 (10p)
Danych jest n rÃ³Å¼nych liczb caÅ‚kowitych nieujemnych wczytywanych z wejÅ›cia do tablicy
int T[n] oraz caÅ‚kowita nieujemna liczba wczytywana z wejÅ›cia do zmiennej int x.
Napisz program w Javie, zawierajÄ…cy metodÄ™ int closest_Product(), ktÃ³ra wyznaczy z tablicy T
parÄ™ rÃ³Å¼nych liczb o iloczynie najbliÅ¼szym liczbie x spoÅ›rÃ³d wszystkich moÅ¼liwych kombinacji.
Metoda ta ma dziaÅ‚aÄ‡ ze zÅ‚oÅ¼onoÅ›ciÄ… O(n log2 n).
PrzykÅ‚adowo dla tablicy T = [2, 3, 9, 5] i liczby x = 47 prawidÅ‚owa odpowiedÅº to {5, 9},
natomiast dla liczby x = 8 prawidÅ‚owa odpowiedÅº to {2, 5},
Na poczÄ…tku proszÄ™ podaÄ‡ ideÄ™ rozwiÄ…zania. ProszÄ™ rÃ³wnieÅ¼ dodaÄ‡ komentarze w
kluczowych liniach kodu. Program powinien zawieraÄ‡ wszystkie niezbÄ™dne elementy, takie jak
wczytanie danych (moÅ¼na zaÅ‚oÅ¼yÄ‡, Å¼e dane sÄ… poprawne) i wykorzystywane metody.
Uzasadnij, dlaczego zaproponowane rozwiÄ…zanie ma podanÄ… zÅ‚oÅ¼onoÅ›Ä‡.
*/

/*
ALGOS
1) Initialize a variable diff as infinite
   (Diff is used to store the difference
   between pair and x).  We need to find
   the minimum diff.
2) Initialize two index variables l and r
   in the given sorted array.
   (a) Initialize first to the leftmost index:
        l = 0
   (b) Initialize second  the rightmost index:
        r = n-1
3) Loop while l < r.
   (a) If  abs((arr[l] * arr[r]) - x) < diff
       then update diff and result
   (b) Else if((arr[l] * arr[r]) <  x)  then
       l++
   (c) Else r--
 */

class zad12 {
    int[] arr;

    void swap(int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    int abs(int x) { //wartosc bezwzgl
        if (x < 0) {
            return x * (-1);
        }
        return x;
    }

    int partition(int low, int high) {
        int pivot = arr[high];
        int i = (low - 1);

        for (int j = low; j <= high - 1; j++) {
            if (arr[j] < pivot) {
                i++;
                swap(i, j);
            }
        }
        swap(i + 1, high);
        return (i + 1);
    }

    void quick(int low, int high) { //quick sort nlogn
        if (low < high) {
            int pivot = partition(low, high);

            quick(low, pivot - 1);
            quick(pivot + 1, high);
        }
    }

    int[] closesProduct(int x) {
        int l = 0;
        int r = arr.length - 1;
        quick(l, r); //sortujemy nlogn
        int diff = Integer.MAX_VALUE;
        int[] result = new int[]{-1, -1};
        while (l < r) { //liniowe wyszukiwanie  O(nlogn) + O(n) = O(nlogn)
            int value = arr[l] * arr[r];

            if (abs(value - x) < diff) {
                diff = abs(value - x);
                result[0] = arr[l];
                result[1] = arr[r];
            } else if (value < x) {
                l++;
            } else {
                r--;
            }
        }

        return result;
    }

}


/*
Zad. 2 Plecak (10p)
Problem pakowania plecaka w najprostszej postaci polega na podejmowaniu prÃ³b
umieszczenia w plecaku elementÃ³w o rÃ³Å¼nej wadze, tak aby sumaryczna waga plecaka
osiÄ…gnÄ™Å‚a pewnÄ… okreÅ›lonÄ… wartoÅ›Ä‡. Przy czym nie ma wymogu, by w plecaku zostaÅ‚y
umieszczone wszystkie elementy.
Napisz w Javie klasÄ™ Source, ktÃ³rej poczÄ…tek ma postaÄ‡:
class Source {
 static int k, // pojemnosc plecaka
 n; // iloÅ›Ä‡ elementÃ³w
 static int [] tab; // tablica elementÃ³w
 static boolean found;
 static String out; // sekwencja elementÃ³w
 â€¦
}
zawierajÄ…cÄ…:
1. funkcjÄ™ rekurencyjnÄ… static boolean pakuj pakuj(â€¦), ktÃ³ra zwraca true i wyznacza
sekwencjÄ™ out â€“ elementÃ³w oddzielonych spacjÄ…, wypeÅ‚niajÄ…cych plecak z zachowaniem
wejÅ›ciowej kolejnoÅ›ci, jeÅ›li operacja pakowania koÅ„czy siÄ™ sukcesem lub zwraca false w
przeciwnym przypadku.
UWAGA: Funkcja pakuj(â€¦) nie moÅ¼e zawieraÄ‡ pÄ™tli

2. oraz funkcjÄ™: public static void main(String []args), ktÃ³ra wczyta: k, n, tab[] i wywoÅ‚a
funkcjÄ™ pakuj(â€¦) oraz wypisze sekwencjÄ™ out, dajÄ…cÄ… sumarycznÄ… wagÄ™ rÃ³wnÄ… pojemnoÅ›ci
plecaka lub NO, gdy pakowanie nie jest moÅ¼liwe.

ProszÄ™ podaÄ‡ komentarze w liniach kodu funkcji pakuj(â€¦), objaÅ›niajÄ…ce jej dziaÅ‚anie

 */

class zad22 {
    static int k, // pojemnosc plecaka
            n; // iloÅ›Ä‡ elementÃ³w
    static int[] tab; // tablica elementÃ³w
    static boolean found;
    static String out; // sekwencja elementÃ³w

    static boolean pakuj(int weight, Stack<Integer> backpack, int takeThis, int sum) {
        if (sum == weight) {
            out = backpack.toString();
            out = out.replaceAll("[\\[\\],]", "");
            return true;
        }
        //jesli nie mozemy rozbudowywac kolejnych galezi cofamy sie o jedna nizej
        if (takeThis < 0 || sum > weight) {
            return false;
        }

        //pakujemy kolejny element do plecaka i rozbudowujemy galezie z niego
        backpack.push(tab[takeThis]);
        sum += tab[takeThis];
        if (pakuj(weight, backpack, takeThis - 1, sum)) {
            return true;
        }

        // jesli nie znajdzie tam to sprawdzaym kolejna galaz
        int temp = backpack.pop(); //zdejmujemy to ktora nie wyszla
        return pakuj(weight, backpack, takeThis - 1, sum - temp);
    }

//    public static void main (String[] args) {
//        Scanner sc = new Scanner(System.in);
//        k = sc.nextInt();
//        n = sc.nextInt();
//        tab = new int[n];
//        for (int i = 0; i < n; i++) {
//            tab[i] = sc.nextInt();
//        }
//        out = "";
//
//        found = pakuj(k, new Stack<Integer>(), n - 1, 0);
//        if (found) {
//            System.out.println(out);
//        }
//
//        //TEST
//        /*
//        20
//        5
//        11 8 7 6 5
//
//        OUT:
//        8 7 5
//         */
//    }


}


/*
Zad. 3 Drzewa (10p)
Dane sÄ… klasy Node oraz Tree:
class Node {
 public int value;
 public Node parent;
 public Node left;
 public Node right;
 ...
}
class Tree {
 public node root;
 ...
}
Napisz dwie metody:
1. boolean is_BST(Tree tree); - sprawdza , czy podane drzewo binarne jest drzewem
BST
2. boolean is_MaxHeap(Tree tree); - sprawdza , czy podane drzewo binarne jest
max-kopcem, tzn. czy wartoÅ›Ä‡ danego wÄ™zÅ‚a, ktÃ³ry nie jest korzeniem jest zawsze ï‚£
niÅ¼ wartoÅ›Ä‡ jego rodzica.
Metoda is_BST powinna zostaÄ‡ napisana rekurencyjnie, natomiast is_MaxHeap iteracyjnie
(moÅ¼na korzystaÄ‡ z dodatkowych struktur danych). Oszacuj i uzasadnij zÅ‚oÅ¼onoÅ›Ä‡ swoich
algorytmÃ³w.
Za kaÅ¼dÄ… z metod moÅ¼na uzyskaÄ‡ 5 punktÃ³w, w tym: 2 punkty za poprawnÄ… metodÄ™, kolejne 2
za zÅ‚oÅ¼onoÅ›Ä‡ liniowÄ… oraz 1 punkt za poprawne oszacowanie wÅ‚asnej zÅ‚oÅ¼onoÅ›ci.
Na poczÄ…tku proszÄ™ podaÄ‡ ideÄ™ rozwiÄ…zania. ProszÄ™ rÃ³wnieÅ¼ dodaÄ‡ komentarze w kluczowych
liniach kodu.

 */

class zad32 {
    class Node {
        public int value;
        public Node parent;
        public Node left;
        public Node right;
    }

    class Tree {
        public Node root;
    }

    class StackNode {
        Node node;
        int check; // ile do sprawdzenia dzieci

        StackNode(Node node, int check) {
            this.node = node;
            this.check = check;
        }

    }

    boolean isbstrec(Node cur) {
        if (cur == null) return true;

        if (cur.left != null) {
            if (cur.left.value > cur.value) {
                return false;
            }
        }

        if (cur.right != null) {
            if (cur.right.value < cur.value) {
                return false;
            }
        }

        return (isbstrec(cur.left) && isbstrec(cur.right));
    }

    boolean isBST(Tree tree) {
        if (tree == null) return false;

        return isbstrec(tree.root);
    }


    boolean isMaxHeap(Tree tree) {
        if (tree == null) return false;
        Stack<Node> stack = new Stack<>();
        stack.push(tree.root);

        while (!stack.isEmpty()) {
            Node temp = stack.pop();
            if (temp != null) {
                if (temp.left != null) {
                    if (temp.left.value > temp.value) {
                        return false;
                    }
                    stack.push(temp.left);
                }

                if (temp.right != null) {
                    if (temp.right.value > temp.value) {
                        return false;
                    }
                    stack.push(temp.right);
                }
            }
        }

        return true;
    }

}


/*
Zad. 4 Grafy (10p)
Dany jest graf G=(V, E), w ktÃ³rym V = {a[0], ... , a[n-1]} â€“ jest zbiorem osÃ³b, E = {{i, j} : osoba a[i]
ma kontakt z osobÄ… a[j]}. ÅšcieÅ¼ka kontaktÃ³w dÅ‚ugoÅ›ci k to ciÄ…g osÃ³b (a[0], ... , a[k]) taki, Å¼e osoba
a[i] ma osobÄ™ a[i+1] na liÅ›cie kontaktÃ³w, O ï‚£ i < k.
Napisz metodÄ™ float ave-length() obliczajÄ…cÄ… Å›redniÄ… arytmetycznÄ… dÅ‚ugoÅ›ci najkrÃ³tszej Å›cieÅ¼ki
kontaktÃ³w pomiÄ™dzy wszystkimi parami rÃ³Å¼nych osÃ³b. MoÅ¼esz zaÅ‚oÅ¼yÄ‡, Å¼e dla i ï‚¹j istnieje
Å›cieÅ¼ka kontaktÃ³w osoby a[ i] do osoby a[j].
Podaj zÅ‚oÅ¼onoÅ›Ä‡ czasowÄ… i pamiÄ™ciowÄ… podanego rozwiÄ…zania i zwiÄ™Åºle uzasadnij.
infinity = +ï‚¥; { nieskoÅ„czonoÅ›Ä‡ }
Deklaracja grafu:
class Graph{
 private int MAX_VERTS = 20;
 private int adjMat[ ][ ]; // macierz sÄ…siedztwa
 private int n; // bieÅ¼Ä…ca liczba osÃ³b
....
}
 gdzie:            _
                  /   1 , gdy osoba i-ta ma j-tÄ… na liÅ›cie kontaktÃ³w,
 adjMat [i, j] = |
                  \_  0 , wpp.

UWAGA. RozwiÄ…zanie nie moÅ¼e korzystaÄ‡ z metod przeglÄ…du grafÃ³w BFS i DFS.
 */

class zad42 {
    class Graph {
        private int MAX_VERTS = 20;
        private int adjMat[][]; // macierz sÄ…siedztwa
        private int n; // bieÅ¼Ä…ca liczba osÃ³b
    }


}


